// you can also use imports, for example:
// import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");
//codility 2-2
class Solution {
    public int solution(int[] A) {
        int N = A.length;
        
        for(int i=0;i<N;i++){
            for(int j=i+1;j<N;j++){
                if(A[i]!=0){
                    if(A[i]==A[j]){
                        A[i]=0;
                        A[j]=0;
                        
                    }
                    
                }
            }
        }
        for(int i=0;i<N;i++){
            if(A[i]!=0){
                return A[i];
                
            }
            
        }
        return 0;
    }
}
-------------------------------------------

class Solution {
    public static void quicksort(int[] a,int low,int high){
        if(a==null || a.length==0){
            return ;
        }
        if(low>=high){
            return;
        }
        int middle = low+(high-low)/2;
        int pivot = a[middle];
        
        int i=low,j=high;
        while(i<=j){
            while(a[i]<pivot){
                i++;
            }
            while(a[j]>pivot){
                j--;
            }
            if(i<=j){
                int temp=a[i];
                a[i]=a[j];
                a[j]=temp;
                i++;
                j--;
            }
        }
        if(low<j){
            quicksort(a,low,j);
        }
        if(high>i){
            quicksort(a,i,high);
        }
    }
    public int solution(int[] A) {
        int N = A.length;
        int count=0;
        int low =0;
        int high=N-1;
        quicksort(A,low,high);
        if(N==1){
            return A[N-1];
        }

        
        for(int i=0;i<N-1;i++){

            if(A[i]==A[i+1]){
                A[i]=0;
                A[i+1]=0;
                i++;
            }else{
                if(A[i+1]==A[i+2]){
                    return A[i];
                }
                
            }
        }

        return A[N-1];
    }
}
