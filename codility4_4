//i have to consider about N range
//if i set my range with max, it's not correct;;;;
class Solution {
    public int solution(int[] A) {
                int N=A.length;
        //int[] count= new int[N];
        int max=0;
        int min=1000001;
        
        for(int i=0;i<N;i++){
            if(max<A[i]){
                max=A[i];
            }
            else if(A[i]<0){
                A[i]=0;
            }
        }
        for(int i=0;i<N;i++){
            if(min>A[i]){
                min=A[i];
            }
        }
        if(max==0)
            return 1;
        if(min!=1){
            return 1;  
        }
        int[] max_count = new int[max];
        for(int i=0;i<max;i++){
            max_count[i]=0;
        }
        for(int i=0;i<N;i++){
            max_count[A[i]-1]++;
        }


        for(int i=0;i<1;i++){
            for(int j=0;j<max;j++){
                if(max_count[j]==0){
                    return j+1;
                }
            }
            return N+1;
        }
        return 1;
    }
}


---------------------------------------------------------------------
// you can also use imports, for example:
// import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

// you can also use imports, for example:
// import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");
import java.util.*;
class Solution {
    public int solution(int[] A) {
        HashSet<Integer> h = new HashSet<Integer>();
        int n=A.length;
        
        for(int i=0;i<n;i++){
            h.add(A[i]);
        }
        if(!h.contains(1)){
            return 1;
        }
        int count=0;
        for(int i=0;i<h.size();i++){
            if(!h.contains(i+1)){
                count++;
                return i+1;
            }else if(count==n-1){
                return n+1;
            }
        }
        return 0;
    }
}
